// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Take extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Take entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Take entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Take", id.toString(), this);
  }

  static load(id: string): Take | null {
    return store.get("Take", id) as Take | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get numRemixes(): i32 {
    let value = this.get("numRemixes");
    return value.toI32();
  }

  set numRemixes(value: i32) {
    this.set("numRemixes", Value.fromI32(value));
  }
}

export class Remix extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Remix entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Remix entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Remix", id.toString(), this);
  }

  static load(id: string): Remix | null {
    return store.get("Remix", id) as Remix | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get source(): string {
    let value = this.get("source");
    return value.toString();
  }

  set source(value: string) {
    this.set("source", Value.fromString(value));
  }

  get remix(): string {
    let value = this.get("remix");
    return value.toString();
  }

  set remix(value: string) {
    this.set("remix", Value.fromString(value));
  }
}
